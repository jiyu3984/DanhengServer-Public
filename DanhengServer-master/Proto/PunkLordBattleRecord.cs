// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: PunkLordBattleRecord.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace EggLink.DanhengServer.Proto {

  /// <summary>Holder for reflection information generated from PunkLordBattleRecord.proto</summary>
  public static partial class PunkLordBattleRecordReflection {

    #region Descriptor
    /// <summary>File descriptor for PunkLordBattleRecord.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PunkLordBattleRecordReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChpQdW5rTG9yZEJhdHRsZVJlY29yZC5wcm90bxoaUHVua0xvcmRCYXR0bGVB",
            "dmF0YXIucHJvdG8i9QEKFFB1bmtMb3JkQmF0dGxlUmVjb3JkEgsKA3VpZBgB",
            "IAEoDRIRCglkYW1hZ2VfaHAYAiABKA0SFAoMaXNfZmluYWxfaGl0GAMgASgI",
            "EhsKE292ZXJfa2lsbF9kYW1hZ2VfaHAYBCABKA0SGQoRYmF0dGxlX3JlcGxh",
            "eV9rZXkYBSABKAkSKgoLYXZhdGFyX2xpc3QYBiADKAsyFS5QdW5rTG9yZEJh",
            "dHRsZUF2YXRhchIUCgxhc3Npc3Rfc2NvcmUYByABKA0SFAoMZGFtYWdlX3Nj",
            "b3JlGAggASgNEhcKD2ZpbmFsX2hpdF9zY29yZRgJIAEoDUIeqgIbRWdnTGlu",
            "ay5EYW5oZW5nU2VydmVyLlByb3RvYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::EggLink.DanhengServer.Proto.PunkLordBattleAvatarReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::EggLink.DanhengServer.Proto.PunkLordBattleRecord), global::EggLink.DanhengServer.Proto.PunkLordBattleRecord.Parser, new[]{ "Uid", "DamageHp", "IsFinalHit", "OverKillDamageHp", "BattleReplayKey", "AvatarList", "AssistScore", "DamageScore", "FinalHitScore" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class PunkLordBattleRecord : pb::IMessage<PunkLordBattleRecord>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PunkLordBattleRecord> _parser = new pb::MessageParser<PunkLordBattleRecord>(() => new PunkLordBattleRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<PunkLordBattleRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EggLink.DanhengServer.Proto.PunkLordBattleRecordReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PunkLordBattleRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PunkLordBattleRecord(PunkLordBattleRecord other) : this() {
      uid_ = other.uid_;
      damageHp_ = other.damageHp_;
      isFinalHit_ = other.isFinalHit_;
      overKillDamageHp_ = other.overKillDamageHp_;
      battleReplayKey_ = other.battleReplayKey_;
      avatarList_ = other.avatarList_.Clone();
      assistScore_ = other.assistScore_;
      damageScore_ = other.damageScore_;
      finalHitScore_ = other.finalHitScore_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PunkLordBattleRecord Clone() {
      return new PunkLordBattleRecord(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "damage_hp" field.</summary>
    public const int DamageHpFieldNumber = 2;
    private uint damageHp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint DamageHp {
      get { return damageHp_; }
      set {
        damageHp_ = value;
      }
    }

    /// <summary>Field number for the "is_final_hit" field.</summary>
    public const int IsFinalHitFieldNumber = 3;
    private bool isFinalHit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsFinalHit {
      get { return isFinalHit_; }
      set {
        isFinalHit_ = value;
      }
    }

    /// <summary>Field number for the "over_kill_damage_hp" field.</summary>
    public const int OverKillDamageHpFieldNumber = 4;
    private uint overKillDamageHp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint OverKillDamageHp {
      get { return overKillDamageHp_; }
      set {
        overKillDamageHp_ = value;
      }
    }

    /// <summary>Field number for the "battle_replay_key" field.</summary>
    public const int BattleReplayKeyFieldNumber = 5;
    private string battleReplayKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string BattleReplayKey {
      get { return battleReplayKey_; }
      set {
        battleReplayKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatar_list" field.</summary>
    public const int AvatarListFieldNumber = 6;
    private static readonly pb::FieldCodec<global::EggLink.DanhengServer.Proto.PunkLordBattleAvatar> _repeated_avatarList_codec
        = pb::FieldCodec.ForMessage(50, global::EggLink.DanhengServer.Proto.PunkLordBattleAvatar.Parser);
    private readonly pbc::RepeatedField<global::EggLink.DanhengServer.Proto.PunkLordBattleAvatar> avatarList_ = new pbc::RepeatedField<global::EggLink.DanhengServer.Proto.PunkLordBattleAvatar>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::EggLink.DanhengServer.Proto.PunkLordBattleAvatar> AvatarList {
      get { return avatarList_; }
    }

    /// <summary>Field number for the "assist_score" field.</summary>
    public const int AssistScoreFieldNumber = 7;
    private uint assistScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint AssistScore {
      get { return assistScore_; }
      set {
        assistScore_ = value;
      }
    }

    /// <summary>Field number for the "damage_score" field.</summary>
    public const int DamageScoreFieldNumber = 8;
    private uint damageScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint DamageScore {
      get { return damageScore_; }
      set {
        damageScore_ = value;
      }
    }

    /// <summary>Field number for the "final_hit_score" field.</summary>
    public const int FinalHitScoreFieldNumber = 9;
    private uint finalHitScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint FinalHitScore {
      get { return finalHitScore_; }
      set {
        finalHitScore_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as PunkLordBattleRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(PunkLordBattleRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (DamageHp != other.DamageHp) return false;
      if (IsFinalHit != other.IsFinalHit) return false;
      if (OverKillDamageHp != other.OverKillDamageHp) return false;
      if (BattleReplayKey != other.BattleReplayKey) return false;
      if(!avatarList_.Equals(other.avatarList_)) return false;
      if (AssistScore != other.AssistScore) return false;
      if (DamageScore != other.DamageScore) return false;
      if (FinalHitScore != other.FinalHitScore) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0) hash ^= Uid.GetHashCode();
      if (DamageHp != 0) hash ^= DamageHp.GetHashCode();
      if (IsFinalHit != false) hash ^= IsFinalHit.GetHashCode();
      if (OverKillDamageHp != 0) hash ^= OverKillDamageHp.GetHashCode();
      if (BattleReplayKey.Length != 0) hash ^= BattleReplayKey.GetHashCode();
      hash ^= avatarList_.GetHashCode();
      if (AssistScore != 0) hash ^= AssistScore.GetHashCode();
      if (DamageScore != 0) hash ^= DamageScore.GetHashCode();
      if (FinalHitScore != 0) hash ^= FinalHitScore.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
      if (DamageHp != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(DamageHp);
      }
      if (IsFinalHit != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsFinalHit);
      }
      if (OverKillDamageHp != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(OverKillDamageHp);
      }
      if (BattleReplayKey.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(BattleReplayKey);
      }
      avatarList_.WriteTo(output, _repeated_avatarList_codec);
      if (AssistScore != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(AssistScore);
      }
      if (DamageScore != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(DamageScore);
      }
      if (FinalHitScore != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(FinalHitScore);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
      if (DamageHp != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(DamageHp);
      }
      if (IsFinalHit != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsFinalHit);
      }
      if (OverKillDamageHp != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(OverKillDamageHp);
      }
      if (BattleReplayKey.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(BattleReplayKey);
      }
      avatarList_.WriteTo(ref output, _repeated_avatarList_codec);
      if (AssistScore != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(AssistScore);
      }
      if (DamageScore != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(DamageScore);
      }
      if (FinalHitScore != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(FinalHitScore);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      if (DamageHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DamageHp);
      }
      if (IsFinalHit != false) {
        size += 1 + 1;
      }
      if (OverKillDamageHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OverKillDamageHp);
      }
      if (BattleReplayKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BattleReplayKey);
      }
      size += avatarList_.CalculateSize(_repeated_avatarList_codec);
      if (AssistScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AssistScore);
      }
      if (DamageScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DamageScore);
      }
      if (FinalHitScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FinalHitScore);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(PunkLordBattleRecord other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
      if (other.DamageHp != 0) {
        DamageHp = other.DamageHp;
      }
      if (other.IsFinalHit != false) {
        IsFinalHit = other.IsFinalHit;
      }
      if (other.OverKillDamageHp != 0) {
        OverKillDamageHp = other.OverKillDamageHp;
      }
      if (other.BattleReplayKey.Length != 0) {
        BattleReplayKey = other.BattleReplayKey;
      }
      avatarList_.Add(other.avatarList_);
      if (other.AssistScore != 0) {
        AssistScore = other.AssistScore;
      }
      if (other.DamageScore != 0) {
        DamageScore = other.DamageScore;
      }
      if (other.FinalHitScore != 0) {
        FinalHitScore = other.FinalHitScore;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
          case 16: {
            DamageHp = input.ReadUInt32();
            break;
          }
          case 24: {
            IsFinalHit = input.ReadBool();
            break;
          }
          case 32: {
            OverKillDamageHp = input.ReadUInt32();
            break;
          }
          case 42: {
            BattleReplayKey = input.ReadString();
            break;
          }
          case 50: {
            avatarList_.AddEntriesFrom(input, _repeated_avatarList_codec);
            break;
          }
          case 56: {
            AssistScore = input.ReadUInt32();
            break;
          }
          case 64: {
            DamageScore = input.ReadUInt32();
            break;
          }
          case 72: {
            FinalHitScore = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
          case 16: {
            DamageHp = input.ReadUInt32();
            break;
          }
          case 24: {
            IsFinalHit = input.ReadBool();
            break;
          }
          case 32: {
            OverKillDamageHp = input.ReadUInt32();
            break;
          }
          case 42: {
            BattleReplayKey = input.ReadString();
            break;
          }
          case 50: {
            avatarList_.AddEntriesFrom(ref input, _repeated_avatarList_codec);
            break;
          }
          case 56: {
            AssistScore = input.ReadUInt32();
            break;
          }
          case 64: {
            DamageScore = input.ReadUInt32();
            break;
          }
          case 72: {
            FinalHitScore = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
