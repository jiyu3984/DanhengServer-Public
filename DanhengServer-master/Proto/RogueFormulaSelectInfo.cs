// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: RogueFormulaSelectInfo.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace EggLink.DanhengServer.Proto {

  /// <summary>Holder for reflection information generated from RogueFormulaSelectInfo.proto</summary>
  public static partial class RogueFormulaSelectInfoReflection {

    #region Descriptor
    /// <summary>File descriptor for RogueFormulaSelectInfo.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RogueFormulaSelectInfoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChxSb2d1ZUZvcm11bGFTZWxlY3RJbmZvLnByb3RvGhJJdGVtQ29zdERhdGEu",
            "cHJvdG8ikAIKFlJvZ3VlRm9ybXVsYVNlbGVjdEluZm8SDwoHaGludF9pZBgF",
            "IAEoDRIeChZyb2xsX2Zvcm11bGFfbWF4X2NvdW50GAIgASgNEhAKCGNhbl9y",
            "b2xsGAggASgIEhoKEnJvbGxfZm9ybXVsYV9jb3VudBgBIAEoDRIfChdyb2xs",
            "X2Zvcm11bGFfZnJlZV9jb3VudBgLIAEoDRItChZyb2xsX2Zvcm11bGFfY29z",
            "dF9kYXRhGA0gASgLMg0uSXRlbUNvc3REYXRhEh4KFnNlbGVjdF9mb3JtdWxh",
            "X2lkX2xpc3QYCSADKA0SJwofaGFuZGJvb2tfdW5sb2NrX2Zvcm11bGFfaWRf",
            "bGlzdBgGIAMoDUIeqgIbRWdnTGluay5EYW5oZW5nU2VydmVyLlByb3RvYgZw",
            "cm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::EggLink.DanhengServer.Proto.ItemCostDataReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::EggLink.DanhengServer.Proto.RogueFormulaSelectInfo), global::EggLink.DanhengServer.Proto.RogueFormulaSelectInfo.Parser, new[]{ "HintId", "RollFormulaMaxCount", "CanRoll", "RollFormulaCount", "RollFormulaFreeCount", "RollFormulaCostData", "SelectFormulaIdList", "HandbookUnlockFormulaIdList" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class RogueFormulaSelectInfo : pb::IMessage<RogueFormulaSelectInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RogueFormulaSelectInfo> _parser = new pb::MessageParser<RogueFormulaSelectInfo>(() => new RogueFormulaSelectInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<RogueFormulaSelectInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EggLink.DanhengServer.Proto.RogueFormulaSelectInfoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RogueFormulaSelectInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RogueFormulaSelectInfo(RogueFormulaSelectInfo other) : this() {
      hintId_ = other.hintId_;
      rollFormulaMaxCount_ = other.rollFormulaMaxCount_;
      canRoll_ = other.canRoll_;
      rollFormulaCount_ = other.rollFormulaCount_;
      rollFormulaFreeCount_ = other.rollFormulaFreeCount_;
      rollFormulaCostData_ = other.rollFormulaCostData_ != null ? other.rollFormulaCostData_.Clone() : null;
      selectFormulaIdList_ = other.selectFormulaIdList_.Clone();
      handbookUnlockFormulaIdList_ = other.handbookUnlockFormulaIdList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RogueFormulaSelectInfo Clone() {
      return new RogueFormulaSelectInfo(this);
    }

    /// <summary>Field number for the "hint_id" field.</summary>
    public const int HintIdFieldNumber = 5;
    private uint hintId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint HintId {
      get { return hintId_; }
      set {
        hintId_ = value;
      }
    }

    /// <summary>Field number for the "roll_formula_max_count" field.</summary>
    public const int RollFormulaMaxCountFieldNumber = 2;
    private uint rollFormulaMaxCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint RollFormulaMaxCount {
      get { return rollFormulaMaxCount_; }
      set {
        rollFormulaMaxCount_ = value;
      }
    }

    /// <summary>Field number for the "can_roll" field.</summary>
    public const int CanRollFieldNumber = 8;
    private bool canRoll_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool CanRoll {
      get { return canRoll_; }
      set {
        canRoll_ = value;
      }
    }

    /// <summary>Field number for the "roll_formula_count" field.</summary>
    public const int RollFormulaCountFieldNumber = 1;
    private uint rollFormulaCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint RollFormulaCount {
      get { return rollFormulaCount_; }
      set {
        rollFormulaCount_ = value;
      }
    }

    /// <summary>Field number for the "roll_formula_free_count" field.</summary>
    public const int RollFormulaFreeCountFieldNumber = 11;
    private uint rollFormulaFreeCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint RollFormulaFreeCount {
      get { return rollFormulaFreeCount_; }
      set {
        rollFormulaFreeCount_ = value;
      }
    }

    /// <summary>Field number for the "roll_formula_cost_data" field.</summary>
    public const int RollFormulaCostDataFieldNumber = 13;
    private global::EggLink.DanhengServer.Proto.ItemCostData rollFormulaCostData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::EggLink.DanhengServer.Proto.ItemCostData RollFormulaCostData {
      get { return rollFormulaCostData_; }
      set {
        rollFormulaCostData_ = value;
      }
    }

    /// <summary>Field number for the "select_formula_id_list" field.</summary>
    public const int SelectFormulaIdListFieldNumber = 9;
    private static readonly pb::FieldCodec<uint> _repeated_selectFormulaIdList_codec
        = pb::FieldCodec.ForUInt32(74);
    private readonly pbc::RepeatedField<uint> selectFormulaIdList_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<uint> SelectFormulaIdList {
      get { return selectFormulaIdList_; }
    }

    /// <summary>Field number for the "handbook_unlock_formula_id_list" field.</summary>
    public const int HandbookUnlockFormulaIdListFieldNumber = 6;
    private static readonly pb::FieldCodec<uint> _repeated_handbookUnlockFormulaIdList_codec
        = pb::FieldCodec.ForUInt32(50);
    private readonly pbc::RepeatedField<uint> handbookUnlockFormulaIdList_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<uint> HandbookUnlockFormulaIdList {
      get { return handbookUnlockFormulaIdList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as RogueFormulaSelectInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(RogueFormulaSelectInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HintId != other.HintId) return false;
      if (RollFormulaMaxCount != other.RollFormulaMaxCount) return false;
      if (CanRoll != other.CanRoll) return false;
      if (RollFormulaCount != other.RollFormulaCount) return false;
      if (RollFormulaFreeCount != other.RollFormulaFreeCount) return false;
      if (!object.Equals(RollFormulaCostData, other.RollFormulaCostData)) return false;
      if(!selectFormulaIdList_.Equals(other.selectFormulaIdList_)) return false;
      if(!handbookUnlockFormulaIdList_.Equals(other.handbookUnlockFormulaIdList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HintId != 0) hash ^= HintId.GetHashCode();
      if (RollFormulaMaxCount != 0) hash ^= RollFormulaMaxCount.GetHashCode();
      if (CanRoll != false) hash ^= CanRoll.GetHashCode();
      if (RollFormulaCount != 0) hash ^= RollFormulaCount.GetHashCode();
      if (RollFormulaFreeCount != 0) hash ^= RollFormulaFreeCount.GetHashCode();
      if (rollFormulaCostData_ != null) hash ^= RollFormulaCostData.GetHashCode();
      hash ^= selectFormulaIdList_.GetHashCode();
      hash ^= handbookUnlockFormulaIdList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (RollFormulaCount != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(RollFormulaCount);
      }
      if (RollFormulaMaxCount != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(RollFormulaMaxCount);
      }
      if (HintId != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(HintId);
      }
      handbookUnlockFormulaIdList_.WriteTo(output, _repeated_handbookUnlockFormulaIdList_codec);
      if (CanRoll != false) {
        output.WriteRawTag(64);
        output.WriteBool(CanRoll);
      }
      selectFormulaIdList_.WriteTo(output, _repeated_selectFormulaIdList_codec);
      if (RollFormulaFreeCount != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(RollFormulaFreeCount);
      }
      if (rollFormulaCostData_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(RollFormulaCostData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (RollFormulaCount != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(RollFormulaCount);
      }
      if (RollFormulaMaxCount != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(RollFormulaMaxCount);
      }
      if (HintId != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(HintId);
      }
      handbookUnlockFormulaIdList_.WriteTo(ref output, _repeated_handbookUnlockFormulaIdList_codec);
      if (CanRoll != false) {
        output.WriteRawTag(64);
        output.WriteBool(CanRoll);
      }
      selectFormulaIdList_.WriteTo(ref output, _repeated_selectFormulaIdList_codec);
      if (RollFormulaFreeCount != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(RollFormulaFreeCount);
      }
      if (rollFormulaCostData_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(RollFormulaCostData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HintId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HintId);
      }
      if (RollFormulaMaxCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RollFormulaMaxCount);
      }
      if (CanRoll != false) {
        size += 1 + 1;
      }
      if (RollFormulaCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RollFormulaCount);
      }
      if (RollFormulaFreeCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RollFormulaFreeCount);
      }
      if (rollFormulaCostData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RollFormulaCostData);
      }
      size += selectFormulaIdList_.CalculateSize(_repeated_selectFormulaIdList_codec);
      size += handbookUnlockFormulaIdList_.CalculateSize(_repeated_handbookUnlockFormulaIdList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(RogueFormulaSelectInfo other) {
      if (other == null) {
        return;
      }
      if (other.HintId != 0) {
        HintId = other.HintId;
      }
      if (other.RollFormulaMaxCount != 0) {
        RollFormulaMaxCount = other.RollFormulaMaxCount;
      }
      if (other.CanRoll != false) {
        CanRoll = other.CanRoll;
      }
      if (other.RollFormulaCount != 0) {
        RollFormulaCount = other.RollFormulaCount;
      }
      if (other.RollFormulaFreeCount != 0) {
        RollFormulaFreeCount = other.RollFormulaFreeCount;
      }
      if (other.rollFormulaCostData_ != null) {
        if (rollFormulaCostData_ == null) {
          RollFormulaCostData = new global::EggLink.DanhengServer.Proto.ItemCostData();
        }
        RollFormulaCostData.MergeFrom(other.RollFormulaCostData);
      }
      selectFormulaIdList_.Add(other.selectFormulaIdList_);
      handbookUnlockFormulaIdList_.Add(other.handbookUnlockFormulaIdList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RollFormulaCount = input.ReadUInt32();
            break;
          }
          case 16: {
            RollFormulaMaxCount = input.ReadUInt32();
            break;
          }
          case 40: {
            HintId = input.ReadUInt32();
            break;
          }
          case 50:
          case 48: {
            handbookUnlockFormulaIdList_.AddEntriesFrom(input, _repeated_handbookUnlockFormulaIdList_codec);
            break;
          }
          case 64: {
            CanRoll = input.ReadBool();
            break;
          }
          case 74:
          case 72: {
            selectFormulaIdList_.AddEntriesFrom(input, _repeated_selectFormulaIdList_codec);
            break;
          }
          case 88: {
            RollFormulaFreeCount = input.ReadUInt32();
            break;
          }
          case 106: {
            if (rollFormulaCostData_ == null) {
              RollFormulaCostData = new global::EggLink.DanhengServer.Proto.ItemCostData();
            }
            input.ReadMessage(RollFormulaCostData);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RollFormulaCount = input.ReadUInt32();
            break;
          }
          case 16: {
            RollFormulaMaxCount = input.ReadUInt32();
            break;
          }
          case 40: {
            HintId = input.ReadUInt32();
            break;
          }
          case 50:
          case 48: {
            handbookUnlockFormulaIdList_.AddEntriesFrom(ref input, _repeated_handbookUnlockFormulaIdList_codec);
            break;
          }
          case 64: {
            CanRoll = input.ReadBool();
            break;
          }
          case 74:
          case 72: {
            selectFormulaIdList_.AddEntriesFrom(ref input, _repeated_selectFormulaIdList_codec);
            break;
          }
          case 88: {
            RollFormulaFreeCount = input.ReadUInt32();
            break;
          }
          case 106: {
            if (rollFormulaCostData_ == null) {
              RollFormulaCostData = new global::EggLink.DanhengServer.Proto.ItemCostData();
            }
            input.ReadMessage(RollFormulaCostData);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
